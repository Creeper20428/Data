//	VMachine
//	x86 architecture constants
//
//	Copyright (c) 2006, Paul Baker
//	Distributed under the New BSD Licence. (See accompanying file License.txt or copy at
//	http://www.paulsprojects.net/NewBSDLicense.txt)

#pragma once

#define EFLAGS_ID_FLAG 0x00200000
#define EFLAGS_AC_FLAG 0x00040000
#define EFLAGS_VM_FLAG 0x00020000
#define EFLAGS_RF_FLAG 0x00010000
#define EFLAGS_NT_FLAG 0x00004000
#define EFLAGS_IOPL_FLAG 0x00003000
#define EFLAGS_IOPL_SHIFT 12
#define EFLAGS_O_FLAG 0x00000800
#define EFLAGS_D_FLAG 0x00000400
#define EFLAGS_I_FLAG 0x00000200
#define EFLAGS_T_FLAG 0x00000100
#define EFLAGS_S_FLAG 0x00000080
#define EFLAGS_Z_FLAG 0x00000040
#define EFLAGS_A_FLAG 0x00000010
#define EFLAGS_P_FLAG 0x00000004
#define EFLAGS_C_FLAG 0x00000001
#define EFLAGS_C_SHIFT 0

#define EFLAGS_STATUS_FLAGS_MASK (EFLAGS_O_FLAG | EFLAGS_S_FLAG | EFLAGS_Z_FLAG | EFLAGS_A_FLAG | EFLAGS_P_FLAG | EFLAGS_C_FLAG)
#define EFLAGS_SYSTEM_CONTROL_FLAGS_MASK (EFLAGS_ID_FLAG | EFLAGS_AC_FLAG | EFLAGS_VM_FLAG | EFLAGS_RF_FLAG | EFLAGS_NT_FLAG | EFLAGS_IOPL_FLAG | EFLAGS_D_FLAG | EFLAGS_I_FLAG | EFLAGS_T_FLAG | 0x00000002)

#define CR0_PG_FLAG 0x80000000
#define CR0_CD_FLAG 0x40000000
#define CR0_NW_FLAG 0x20000000
#define CR0_AM_FLAG 0x00040000
#define CR0_WP_FLAG 0x00010000
#define CR0_NE_FLAG 0x00000020
#define CR0_ET_FLAG 0x00000010
#define CR0_TS_FLAG 0x00000008
#define CR0_EM_FLAG 0x00000004
#define CR0_MP_FLAG 0x00000002
#define CR0_PE_FLAG 0x00000001

#define CR0_MASK (CR0_PG_FLAG | CR0_CD_FLAG | CR0_NW_FLAG | CR0_AM_FLAG | CR0_WP_FLAG | CR0_NE_FLAG | CR0_ET_FLAG | CR0_TS_FLAG | CR0_EM_FLAG | CR0_MP_FLAG | CR0_PE_FLAG)

#define CR3_PCD_FLAG 0x00000010
#define CR3_PWT_FLAG 0x00000008

#define CR3_MASK (0xfffff000 | CR3_PCD_FLAG | CR3_PWT_FLAG)

#define CR4_OSXMMEXCPT_FLAG 0x00000400
#define CR4_OSFXSR_FLAG 0x00000200
#define CR4_PCE_FLAG 0x00000100
#define CR4_PGE_FLAG 0x00000080
#define CR4_MCE_FLAG 0x00000040
#define CR4_PAE_FLAG 0x00000020
#define CR4_PSE_FLAG 0x00000010
#define CR4_DE_FLAG 0x00000008
#define CR4_TSD_FLAG 0x00000004
#define CR4_PVI_FLAG 0x00000002
#define CR4_VME_FLAG 0x00000001

#define CR4_MASK (CR4_OSXMMEXCPT_FLAG | CR4_OSFXSR_FLAG | CR4_PCE_FLAG | CR4_PGE_FLAG | CR4_MCE_FLAG | CR4_PAE_FLAG | CR4_PSE_FLAG | CR4_DE_FLAG | CR4_TSD_FLAG | CR4_PVI_FLAG | CR4_VME_FLAG)

#define EXCEPTION_NONE						0xffffffff
#define EXCEPTION_DIVIDE_ERROR				0
#define	EXCEPTION_DEBUG						1
#define	EXCEPTION_NMI						2
#define	EXCEPTION_BRKPOINT					3
#define	EXCEPTION_OVERFLOW					4
#define	EXCEPTION_BOUND_RANGE_EXCEEDED		5
#define	EXCEPTION_INVALID_OPCODE			6
#define	EXCEPTION_DEVICE_NOT_AVAILABLE		7
#define	EXCEPTION_DOUBLE_FAULT				8
#define	EXCEPTION_COPROC_SEGMENT_OVERRUN	9
#define	EXCEPTION_INVALID_TSS				10
#define	EXCEPTION_SEGMENT_NOT_PRESENT		11
#define	EXCEPTION_STACK_FAULT				12
#define	EXCEPTION_GENERAL_PROTECTION		13
#define	EXCEPTION_PAGE_FAULT				14
//15 RESERVED
#define	EXCEPTION_FLOATING_POINT_ERROR		16

#define ERROR_CODE_EXT_BIT	0x0001
#define ERROR_CODE_IDT_BIT	0x0002
#define ERROR_CODE_TI_BIT	0x0004

#define PAGE_FAULT_ERROR_CODE_PROTECTION_FAULT		0x00000001
#define PAGE_FAULT_ERROR_CODE_NOT_PRESENT_FAULT		0x00000000
#define PAGE_FAULT_ERROR_CODE_WRITE					0x00000002
#define PAGE_FAULT_ERROR_CODE_READ					0x00000000
#define PAGE_FAULT_ERROR_CODE_USER_MODE				0x00000004
#define PAGE_FAULT_ERROR_CODE_SUPERVISOR_MODE		0x00000000

//WinNT.h also #defines REG_NONE...
#ifdef REG_NONE
#undef REG_NONE
#endif

#define REG_NONE	0xffffffff
#define REG_EAX		0
#define REG_ECX		1
#define REG_EDX		2
#define REG_EBX		3
#define REG_ESP		4
#define REG_EBP		5
#define REG_ESI		6
#define REG_EDI		7
#define REG_AL		8
#define REG_CL		9
#define REG_DL		10
#define REG_BL		11
#define REG_AH		12
#define REG_CH		13
#define REG_DH		14
#define REG_BH		15
#define REG_CS		16
#define REG_CS_BASE	17
#define REG_DS		18
#define REG_DS_BASE	19
#define REG_ES		20
#define REG_ES_BASE	21
#define REG_FS		22
#define REG_FS_BASE	23
#define REG_GS		24
#define REG_GS_BASE	25
#define REG_SS		26
#define REG_SS_BASE	27
#define REG_EIP		28
#define REG_CR0		29
#define REG_CR2		30
#define REG_CR3		31
#define REG_CR4		32
#define REG_DR0		33
#define REG_DR1		34
#define REG_DR2		35
#define REG_DR3		36
#define REG_DR4		37
#define REG_DR5		38
#define REG_DR6		39
#define REG_DR7		40

#define FUNC_NONE		0xffffffff

#define ALU_FUNC_ADD	0
#define ALU_FUNC_OR		1
#define ALU_FUNC_ADC	2
#define ALU_FUNC_SBB	3
#define ALU_FUNC_AND	4
#define ALU_FUNC_SUB	5
#define ALU_FUNC_XOR	6
#define ALU_FUNC_CMP	7
#define ALU_FUNC_TEST	8

#define UALU_FUNC_INC	0
#define UALU_FUNC_DEC	1
#define UALU_FUNC_NOT	2
#define UALU_FUNC_NEG	3

#define SHIFT_FUNC_ROL	0
#define SHIFT_FUNC_ROR	1
#define SHIFT_FUNC_RCL	2
#define SHIFT_FUNC_RCR	3
#define SHIFT_FUNC_SHL	4
#define SHIFT_FUNC_SHR	5
#define SHIFT_FUNC_SAL	6
#define SHIFT_FUNC_SAR	7

#define SHIFTD_FUNC_SHLD	0
#define SHIFTD_FUNC_SHRD	1

#define MUL_FUNC_MUL_16_8_8		0
#define MUL_FUNC_IMUL_16_8_8	1
#define MUL_FUNC_MUL_32_16_16	2
#define MUL_FUNC_IMUL_32_16_16	3
#define MUL_FUNC_MUL_64_32_32	4
#define MUL_FUNC_IMUL_64_32_32	5

#define DIV_FUNC_DIV_16_16_8	0
#define DIV_FUNC_IDIV_16_16_8	1
#define DIV_FUNC_DIV_32_32_16	2
#define DIV_FUNC_IDIV_32_32_16	3
#define DIV_FUNC_DIV_64_64_32	4
#define DIV_FUNC_IDIV_64_64_32	5

#define BIT_FUNC_BT		0
#define BIT_FUNC_BTS	1
#define BIT_FUNC_BTR	2
#define BIT_FUNC_BTC	3

#define BIT_SCAN_FUNC_BSF	0
#define BIT_SCAN_FUNC_BSR	1

#define AS_ADJUST_FUNC_DAA	0
#define AS_ADJUST_FUNC_DAS	1
#define AS_ADJUST_FUNC_AAA	2
#define AS_ADJUST_FUNC_AAS	3

#define MD_ADJUST_FUNC_AAM	0
#define MD_ADJUST_FUNC_AAD	1

#define CONDITION_O		0x00
#define CONDITION_NO	0x01
#define CONDITION_B		0x02
#define CONDITION_NB	0x03
#define CONDITION_Z		0x04
#define CONDITION_NZ	0x05
#define CONDITION_BE	0x06
#define CONDITION_NBE	0x07
#define CONDITION_S		0x08
#define CONDITION_NS	0x09
#define CONDITION_P		0x0a
#define CONDITION_NP	0x0b
#define CONDITION_L		0x0c
#define CONDITION_NL	0x0d
#define CONDITION_LE	0x0e
#define CONDITION_NLE	0x0f
#define CONDITION_CXZ	0x10
#define CONDITION_CXNZ	0x11
#define CONDITION_ECXZ	0x12
#define CONDITION_ECXNZ	0x13

static inline BOOL ConditionUsesOFlag(Dword cond)
{
	return	cond == CONDITION_O || cond == CONDITION_NO ||
			cond == CONDITION_L || cond == CONDITION_NL ||
			cond == CONDITION_LE || cond == CONDITION_NLE;
}

#define SELECTOR_INDEX_MASK 0xfff8
#define SELECTOR_TI_BIT 0x0004
#define SELECTOR_RPL_MASK 0x0003
#define SELECTOR_RPL_SHIFT 0

#define DESCRIPTOR_FLAGS_GRANULARITY_BIT		0x00800000
#define DESCRIPTOR_FLAGS_DEFAULT_BIG_BIT		0x00400000
#define DESCRIPTOR_FLAGS_PRESENT_BIT			0x00008000
#define DESCRIPTOR_FLAGS_DPL_MASK				0x00006000
#define DESCRIPTOR_FLAGS_DPL_SHIFT				13

#define DESCRIPTOR_FLAGS_TYPE_MASK				0x00001f00

#define DESCRIPTOR_FLAGS_TYPE_TSS_16_BIT_AVAIL	0x00000100
#define DESCRIPTOR_FLAGS_TYPE_LDT				0x00000200
#define DESCRIPTOR_FLAGS_TYPE_TSS_16_BIT_BUSY	0x00000300
#define DESCRIPTOR_FLAGS_TYPE_CALL_GATE_16_BIT	0x00000400
#define DESCRIPTOR_FLAGS_TYPE_TASK_GATE			0x00000500
#define DESCRIPTOR_FLAGS_TYPE_INT_GATE_16_BIT	0x00000600
#define DESCRIPTOR_FLAGS_TYPE_TRAP_GATE_16_BIT	0x00000700
#define DESCRIPTOR_FLAGS_TYPE_TSS_32_BIT_AVAIL	0x00000900
#define DESCRIPTOR_FLAGS_TYPE_TSS_32_BIT_BUSY	0x00000b00
#define DESCRIPTOR_FLAGS_TYPE_CALL_GATE_32_BIT	0x00000c00
#define DESCRIPTOR_FLAGS_TYPE_INT_GATE_32_BIT	0x00000e00
#define DESCRIPTOR_FLAGS_TYPE_TRAP_GATE_32_BIT	0x00000f00

#define DESCRIPTOR_FLAGS_TYPE_DATA_RO					0x00001000
#define DESCRIPTOR_FLAGS_TYPE_DATA_RO_ACCESSED			0x00001100
#define DESCRIPTOR_FLAGS_TYPE_DATA_RW					0x00001200
#define DESCRIPTOR_FLAGS_TYPE_DATA_RW_ACCESSED			0x00001300
#define DESCRIPTOR_FLAGS_TYPE_DATA_RO_XDOWN				0x00001400
#define DESCRIPTOR_FLAGS_TYPE_DATA_RO_XDOWN_ACCESSED	0x00001500
#define DESCRIPTOR_FLAGS_TYPE_DATA_RW_XDOWN				0x00001600
#define DESCRIPTOR_FLAGS_TYPE_DATA_RW_XDOWN_ACCESSED	0x00001700
#define DESCRIPTOR_FLAGS_TYPE_CODE_XO					0x00001800
#define DESCRIPTOR_FLAGS_TYPE_CODE_XO_ACCESSED			0x00001900
#define DESCRIPTOR_FLAGS_TYPE_CODE_XR					0x00001a00
#define DESCRIPTOR_FLAGS_TYPE_CODE_XR_ACCESSED			0x00001b00
#define DESCRIPTOR_FLAGS_TYPE_CODE_XO_CONF				0x00001c00
#define DESCRIPTOR_FLAGS_TYPE_CODE_XO_CONF_ACCESSED		0x00001d00
#define DESCRIPTOR_FLAGS_TYPE_CODE_XR_CONF				0x00001e00
#define DESCRIPTOR_FLAGS_TYPE_CODE_XR_CONF_ACCESSED		0x00001f00

#define TSS_DESCRIPTOR_FLAGS_BUSY_BIT		0x00000200

#define CALL_GATE_DESCRIPTOR_HIGH_PARAMETER_COUNT_MASK		0x0000001f
#define CALL_GATE_DESCRIPTOR_HIGH_PARAMETER_COUNT_SHIFT		0

static inline Dword GetDescriptorBase(Dword descriptorLow, Dword descriptorHigh)
{
	return	(descriptorHigh & 0xff000000) |
			((descriptorHigh & 0x000000ff) << 16) |
			((descriptorLow & 0xffff0000) >> 16);
}

static inline Dword GetDescriptorLimit(Dword descriptorLow, Dword descriptorHigh)
{
	Dword limit = (descriptorHigh & 0x000f0000) | (descriptorLow & 0x0000ffff);

	if((descriptorHigh & DESCRIPTOR_FLAGS_GRANULARITY_BIT) != 0)
	{
		limit <<= 12;
		limit |= 0x00000fff;
	}

	return limit;
}

static inline Dword GetDescriptorFlags(Dword descriptorHigh)
{
	return descriptorHigh & 0x00f0ff00;
}

static inline BOOL IsSystemSegment(Dword descriptorHigh)
{
	return (descriptorHigh & 0x00001000) == 0;
}

static inline BOOL IsCodeSegment(Dword descriptorHigh)
{
	return (descriptorHigh & 0x00001800) == 0x00001800;
}

static inline BOOL IsConformingCodeSegment(Dword descriptorHigh)
{
	return (descriptorHigh & 0x00001c00) == 0x00001c00;
}

#define PDE_PRESENT_BIT 0x00000001
#define PDE_WRITABLE_BIT 0x00000002
#define PDE_USER_BIT 0x00000004
#define PDE_PWT_BIT 0x00000008
#define PDE_PCD_BIT 0x00000010
#define PDE_ACCESSED_BIT 0x00000020
#define PDE_PAGE_SIZE_BIT 0x00000080
#define PDE_GLOBAL_BIT 0x00000100
#define PDE_ADDRESS_MASK 0xfffff000

#define PTE_PRESENT_BIT 0x00000001
#define PTE_WRITABLE_BIT 0x00000002
#define PTE_USER_BIT 0x00000004
#define PTE_PWT_BIT 0x00000008
#define PTE_PCD_BIT 0x00000010
#define PTE_ACCESSED_BIT 0x00000020
#define PTE_DIRTY_BIT 0x00000040
#define PTE_ATTRIBUTE_BIT 0x00000080
#define PTE_GLOBAL_BIT 0x00000100
#define PTE_ADDRESS_MASK 0xfffff000

#define CPUID_FEATURE_PBE_BIT	0x80000000
#define CPUID_FEATURE_TM_BIT	0x20000000
#define CPUID_FEATURE_HTT_BIT	0x10000000
#define CPUID_FEATURE_SS_BIT	0x08000000
#define CPUID_FEATURE_SSE2_BIT	0x04000000
#define CPUID_FEATURE_SSE_BIT	0x02000000
#define CPUID_FEATURE_FXSR_BIT	0x01000000
#define CPUID_FEATURE_MMX_BIT	0x00800000
#define CPUID_FEATURE_ACPI_BIT	0x00400000
#define CPUID_FEATURE_DS_BIT	0x00200000
#define CPUID_FEATURE_CLFSH_BIT	0x00080000
#define CPUID_FEATURE_PSN_BIT	0x00040000
#define CPUID_FEATURE_PSE36_BIT	0x00020000
#define CPUID_FEATURE_PAT_BIT	0x00010000
#define CPUID_FEATURE_CMOV_BIT	0x00008000
#define CPUID_FEATURE_MCA_BIT	0x00004000
#define CPUID_FEATURE_PGE_BIT	0x00002000
#define CPUID_FEATURE_MTRR_BIT	0x00001000
#define CPUID_FEATURE_SEP_BIT	0x00000800
#define CPUID_FEATURE_APIC_BIT	0x00000200
#define CPUID_FEATURE_CX8_BIT	0x00000100
#define CPUID_FEATURE_MCE_BIT	0x00000080
#define CPUID_FEATURE_PAE_BIT	0x00000040
#define CPUID_FEATURE_MSR_BIT	0x00000020
#define CPUID_FEATURE_TSC_BIT	0x00000010
#define CPUID_FEATURE_PSE_BIT	0x00000008
#define CPUID_FEATURE_DE_BIT	0x00000004
#define CPUID_FEATURE_VME_BIT	0x00000002
#define CPUID_FEATURE_FPU_BIT	0x00000001

#define OPCODE_A32		0x80000000
#define OPCODE_O32		0x40000000
#define OPCODE_REP		0x20000000
#define OPCODE_REPNE	0x10000000
