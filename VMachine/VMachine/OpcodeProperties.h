//	VMachine
//	Properties of x86 opcodes
//
//	Copyright (c) 2006, Paul Baker
//	Distributed under the New BSD Licence. (See accompanying file License.txt or copy at
//	http://www.paulsprojects.net/NewBSDLicense.txt)

#pragma once

typedef Dword OpcodeProperties;

const OpcodeProperties OPCODE_INTERPRET = 0x01;
const OpcodeProperties OPCODE_INTERPRET_IF_REG_2345 = 0x02;
const OpcodeProperties OPCODE_INTERPRET_IF_REG_12 = 0x04;
const OpcodeProperties OPCODE_FUNCTION_IMPLEMENTATION = 0x08;
const OpcodeProperties OPCODE_FUNCTION_IMPLEMENTATION_IF_MOD_MEM_AND_REG_46 = 0x10;
const OpcodeProperties OPCODE_PREFIX = 0x20;
const OpcodeProperties OPCODE_HAS_MOD_RM = 0x40;
const OpcodeProperties OPCODE_GROUP = 0x80;
const OpcodeProperties OPCODE_EXTENDED_GROUP = 0x100;
const OpcodeProperties OPCODE_HAS_IMMEDIATE_BYTE = 0x200;
const OpcodeProperties OPCODE_HAS_IMMEDIATE_WORD = 0x400;
const OpcodeProperties OPCODE_HAS_IMMEDIATE_O_SIZE = 0x800;
const OpcodeProperties OPCODE_HAS_IMMEDIATE_A_SIZE = 0x1000;
const OpcodeProperties OPCODE_HAS_IMMEDIATE_BYTE_IF_REG_0 = 0x2000;
const OpcodeProperties OPCODE_HAS_IMMEDIATE_O_SIZE_IF_REG_0 = 0x4000;
const OpcodeProperties OPCODE_COPROC = 0x8000;
const OpcodeProperties OPCODE_UNCOND_NEAR_CONTROL_TRANSFER = 0x10000;
const OpcodeProperties OPCODE_COND_NEAR_CONTROL_TRANSFER = 0x20000;
const OpcodeProperties OPCODE_MISC_NEAR_CONTROL_TRANSFER = 0x40000;
const OpcodeProperties OPCODE_STRING = 0x80000;

const OpcodeProperties noPrefixOpcodeProperties[0x100] =
{
	OPCODE_HAS_MOD_RM,			//ADD Eb, Gb
	OPCODE_HAS_MOD_RM,			//ADD Ev, Gv
	OPCODE_HAS_MOD_RM,			//ADD Gb, Eb
	OPCODE_HAS_MOD_RM,			//ADD Gv, Ev
	OPCODE_HAS_IMMEDIATE_BYTE,	//ADD AL, Ib
	OPCODE_HAS_IMMEDIATE_O_SIZE,//ADD eAX, Iv
	0,							//PUSH ES
	0,							//POP ES

	OPCODE_HAS_MOD_RM,			//OR Eb, Gb
	OPCODE_HAS_MOD_RM,			//OR Ev, Gv
	OPCODE_HAS_MOD_RM,			//OR Gb, Eb
	OPCODE_HAS_MOD_RM,			//OR Gv, Ev
	OPCODE_HAS_IMMEDIATE_BYTE,	//OR AL, Ib
	OPCODE_HAS_IMMEDIATE_O_SIZE,//OR eAX, Iv
	0,							//PUSH CS
	0,							//Escape 0F - handled explicitly

	OPCODE_HAS_MOD_RM,			//ADC Eb, Gb
	OPCODE_HAS_MOD_RM,			//ADC Ev, Gv
	OPCODE_HAS_MOD_RM,			//ADC Gb, Eb
	OPCODE_HAS_MOD_RM,			//ADC Gv, Ev
	OPCODE_HAS_IMMEDIATE_BYTE,	//ADC AL, Ib
	OPCODE_HAS_IMMEDIATE_O_SIZE,//ADC eAX, Iv
	0,							//PUSH SS
	OPCODE_INTERPRET,			//POP SS

	OPCODE_HAS_MOD_RM,			//SBB Eb, Gb
	OPCODE_HAS_MOD_RM,			//SBB Ev, Gv
	OPCODE_HAS_MOD_RM,			//SBB Gb, Eb
	OPCODE_HAS_MOD_RM,			//SBB Gv, Ev
	OPCODE_HAS_IMMEDIATE_BYTE,	//SBB AL, Ib
	OPCODE_HAS_IMMEDIATE_O_SIZE,//SBB eAX, Iv
	0,							//PUSH DS
	0,							//POP DS

	OPCODE_HAS_MOD_RM,			//AND Eb, Gb
	OPCODE_HAS_MOD_RM,			//AND Ev, Gv
	OPCODE_HAS_MOD_RM,			//AND Gb, Eb
	OPCODE_HAS_MOD_RM,			//AND Gv, Ev
	OPCODE_HAS_IMMEDIATE_BYTE,	//AND AL, Ib
	OPCODE_HAS_IMMEDIATE_O_SIZE,//AND eAX, Iv
	OPCODE_PREFIX,				//SEG ES
	0,							//DAA

	OPCODE_HAS_MOD_RM,			//SUB Eb, Gb
	OPCODE_HAS_MOD_RM,			//SUB Ev, Gv
	OPCODE_HAS_MOD_RM,			//SUB Gb, Eb
	OPCODE_HAS_MOD_RM,			//SUB Gv, Ev
	OPCODE_HAS_IMMEDIATE_BYTE,	//SUB AL, Ib
	OPCODE_HAS_IMMEDIATE_O_SIZE,//SUB eAX, Iv
	OPCODE_PREFIX,				//SEG CS
	0,							//DAS

	OPCODE_HAS_MOD_RM,			//XOR Eb, Gb
	OPCODE_HAS_MOD_RM,			//XOR Ev, Gv
	OPCODE_HAS_MOD_RM,			//XOR Gb, Eb
	OPCODE_HAS_MOD_RM,			//XOR Gv, Ev
	OPCODE_HAS_IMMEDIATE_BYTE,	//XOR AL, Ib
	OPCODE_HAS_IMMEDIATE_O_SIZE,//XOR eAX, Iv
	OPCODE_PREFIX,				//SEG SS
	0,							//AAA

	OPCODE_HAS_MOD_RM,			//CMP Eb, Gb
	OPCODE_HAS_MOD_RM,			//CMP Ev, Gv
	OPCODE_HAS_MOD_RM,			//CMP Gb, Eb
	OPCODE_HAS_MOD_RM,			//CMP Gv, Ev
	OPCODE_HAS_IMMEDIATE_BYTE,	//CMP AL, Ib
	OPCODE_HAS_IMMEDIATE_O_SIZE,//CMP eAX, Iv
	OPCODE_PREFIX,				//SEG DS
	0,							//AAS

	0,	//INC eAX
	0,	//INC eCX
	0,	//INC eDX
	0,	//INC eBX
	0,	//INC eSP
	0,	//INC eBP
	0,	//INC eSI
	0,	//INC eDI

	0,	//DEC eAX
	0,	//DEC eCX
	0,	//DEC eDX
	0,	//DEC eBX
	0,	//DEC eSP
	0,	//DEC eBP
	0,	//DEC eSI
	0,	//DEC eDI

	0,	//PUSH eAX
	0,	//PUSH eCX
	0,	//PUSH eDX
	0,	//PUSH eBX
	0,	//PUSH eSP
	0,	//PUSH eBP
	0,	//PUSH eSI
	0,	//PUSH eDI

	0,	//POP eAX
	0,	//POP eCX
	0,	//POP eDX
	0,	//POP eBX
	0,	//POP eSP
	0,	//POP eBP
	0,	//POP eSI
	0,	//POP eDI

	OPCODE_FUNCTION_IMPLEMENTATION,						//PUSHA
	OPCODE_FUNCTION_IMPLEMENTATION,						//POPA
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,	//BOUND Gv, Ma
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,	//ARPL Ew, Gw
	OPCODE_PREFIX,										//SEG FS
	OPCODE_PREFIX,										//SEG GS
	OPCODE_PREFIX,										//Operand Size
	OPCODE_PREFIX,										//Address Size

	OPCODE_HAS_IMMEDIATE_O_SIZE,						//PUSH Iv
	OPCODE_HAS_MOD_RM | OPCODE_HAS_IMMEDIATE_O_SIZE,	//IMUL Gv, Ev, Iv
	OPCODE_HAS_IMMEDIATE_BYTE,							//PUSH Ib
	OPCODE_HAS_MOD_RM | OPCODE_HAS_IMMEDIATE_BYTE,		//IMUL Gv, Ev, Ib
	OPCODE_INTERPRET,	//INS Yb, DX
	OPCODE_INTERPRET,	//INS Yv, DX
	OPCODE_INTERPRET,	//OUTS DX, Xb
	OPCODE_INTERPRET,	//OUTS DX, Xv

	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JO Jb
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNO Jb
	OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JB Jb
	OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNB Jb
	OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JZ Jb
	OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNZ Jb
	OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JBE Jb
	OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNBE Jb

	OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JS Jb
	OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNS Jb
	OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JP Jb
	OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNP Jb
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JL Jb
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNL Jb
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JLE Jb
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNLE Jb

	OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_HAS_IMMEDIATE_BYTE,	//IMM1 Eb, Ib
	OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_HAS_IMMEDIATE_O_SIZE,	//IMM1 Ev, Iv
	OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_HAS_IMMEDIATE_BYTE,	//IMM1 Eb, Ib
	OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_HAS_IMMEDIATE_BYTE,	//IMM1 Ev, Ib
	OPCODE_HAS_MOD_RM,	//TEST Eb, Gb
	OPCODE_HAS_MOD_RM,	//TEST Ev, Gv
	OPCODE_HAS_MOD_RM,	//XCHG Eb, Gb
	OPCODE_HAS_MOD_RM,	//XCHG Ev, Gv

	OPCODE_HAS_MOD_RM,	//MOV Eb, Gb
	OPCODE_HAS_MOD_RM,	//MOV Ev, Gv
	OPCODE_HAS_MOD_RM,	//MOV Gb, Eb
	OPCODE_HAS_MOD_RM,	//MOV Gv, Ev
	OPCODE_HAS_MOD_RM,	//MOV Ew, Sw
	OPCODE_HAS_MOD_RM,	//LEA Gv, M
	OPCODE_INTERPRET_IF_REG_12 | OPCODE_HAS_MOD_RM | OPCODE_GROUP,	//MOV Sw, Ew
	OPCODE_HAS_MOD_RM,	//POP Ev

	0,	//NOP
	0,	//XCHG eAX, eCX
	0,	//XCHG eAX, eDX
	0,	//XCHG eAX, eBX
	0,	//XCHG eAX, eSP
	0,	//XCHG eAX, eBP
	0,	//XCHG eAX, eSI
	0,	//XCHG eAX, eDI

	0,									//CBW/CWDE
	0,									//CWD/CDQ
	OPCODE_INTERPRET,					//CALLF Ap
	0,									//WAIT
	OPCODE_FUNCTION_IMPLEMENTATION,		//PUSHF
	OPCODE_INTERPRET,					//POPF
	0,									//SAHF
	0,									//LAHF

	OPCODE_HAS_IMMEDIATE_A_SIZE,	//MOV AL, Ob
	OPCODE_HAS_IMMEDIATE_A_SIZE,	//MOV eAX, Ov
	OPCODE_HAS_IMMEDIATE_A_SIZE,	//MOV Ob, AL
	OPCODE_HAS_IMMEDIATE_A_SIZE,	//MOV Ov, eAX
	OPCODE_STRING,	//MOVS Yb, Xb
	OPCODE_STRING,	//MOVS Yv, Xv
	OPCODE_STRING,	//CMPS Yb, Xb
	OPCODE_STRING,	//CMPS Yv, Xv

	OPCODE_HAS_IMMEDIATE_BYTE,		//TEST AL, Ib
	OPCODE_HAS_IMMEDIATE_O_SIZE,	//TEST eAX, Iv
	OPCODE_STRING,	//STOS Yb, AL
	OPCODE_STRING,	//STOS Yv, eAX
	OPCODE_STRING,	//LODS AL, Xb
	OPCODE_STRING,	//LODS eAX, Xv
	OPCODE_STRING,	//SCAS AL, Yb
	OPCODE_STRING,	//SCAS eAX, Yv

	OPCODE_HAS_IMMEDIATE_BYTE,	//MOV AL, Ib
	OPCODE_HAS_IMMEDIATE_BYTE,	//MOV CL, Ib
	OPCODE_HAS_IMMEDIATE_BYTE,	//MOV DL, Ib
	OPCODE_HAS_IMMEDIATE_BYTE,	//MOV BL, Ib
	OPCODE_HAS_IMMEDIATE_BYTE,	//MOV AH, Ib
	OPCODE_HAS_IMMEDIATE_BYTE,	//MOV CH, Ib
	OPCODE_HAS_IMMEDIATE_BYTE,	//MOV DH, Ib
	OPCODE_HAS_IMMEDIATE_BYTE,	//MOV BH, Ib

	OPCODE_HAS_IMMEDIATE_O_SIZE,	//MOV eAX, Iv
	OPCODE_HAS_IMMEDIATE_O_SIZE,	//MOV eCX, Iv
	OPCODE_HAS_IMMEDIATE_O_SIZE,	//MOV eDX, Iv
	OPCODE_HAS_IMMEDIATE_O_SIZE,	//MOV eBX, Iv
	OPCODE_HAS_IMMEDIATE_O_SIZE,	//MOV eSP, Iv
	OPCODE_HAS_IMMEDIATE_O_SIZE,	//MOV eBP, Iv
	OPCODE_HAS_IMMEDIATE_O_SIZE,	//MOV eSI, Iv
	OPCODE_HAS_IMMEDIATE_O_SIZE,	//MOV eDI, Iv

	OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_HAS_IMMEDIATE_BYTE,	//SHIFT2 Eb, Ib
	OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_HAS_IMMEDIATE_BYTE,	//SHIFT2 Ev, Ib
	OPCODE_MISC_NEAR_CONTROL_TRANSFER | OPCODE_HAS_IMMEDIATE_WORD,	//RET Iw
	OPCODE_MISC_NEAR_CONTROL_TRANSFER,								//RET
	OPCODE_HAS_MOD_RM,					//LES Gv, Mp
	OPCODE_HAS_MOD_RM,					//LDS Gv, Mp
	OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_HAS_IMMEDIATE_BYTE,	//MOV11 Eb, Ib
	OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_HAS_IMMEDIATE_O_SIZE,	//MOV11 Ev, Iv

	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_IMMEDIATE_WORD | OPCODE_HAS_IMMEDIATE_BYTE,	//ENTER Iw, Ib
	0,					//LEAVE
	OPCODE_INTERPRET,	//RETF Iw
	OPCODE_INTERPRET,	//RETF
	OPCODE_INTERPRET,	//INT 3
	OPCODE_INTERPRET,	//INT Ib
	OPCODE_INTERPRET,	//INTO
	OPCODE_INTERPRET,	//IRET

	OPCODE_HAS_MOD_RM | OPCODE_GROUP,	//SHIFT2 Eb, 1
	OPCODE_HAS_MOD_RM | OPCODE_GROUP,	//SHIFT2 Ev, 1
	OPCODE_HAS_MOD_RM | OPCODE_GROUP,	//SHIFT2 Eb, CL
	OPCODE_HAS_MOD_RM | OPCODE_GROUP,	//SHIFT2 Ev, CL
	OPCODE_HAS_IMMEDIATE_BYTE,			//AAM Ib
	OPCODE_HAS_IMMEDIATE_BYTE,			//AAD Ib
	0,									//SALC
	0,									//XLAT

	OPCODE_COPROC | OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_EXTENDED_GROUP,	//Coproc D8
	OPCODE_FUNCTION_IMPLEMENTATION_IF_MOD_MEM_AND_REG_46 |
		OPCODE_COPROC | OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_EXTENDED_GROUP,//Coproc D9
	OPCODE_COPROC | OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_EXTENDED_GROUP,	//Coproc Da
	OPCODE_COPROC | OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_EXTENDED_GROUP,	//Coproc Db
	OPCODE_COPROC | OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_EXTENDED_GROUP,	//Coproc Dc
	OPCODE_FUNCTION_IMPLEMENTATION_IF_MOD_MEM_AND_REG_46 |
		OPCODE_COPROC | OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_EXTENDED_GROUP,//Coproc Dd
	OPCODE_COPROC | OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_EXTENDED_GROUP,	//Coproc De
	OPCODE_COPROC | OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_EXTENDED_GROUP,	//Coproc Df

	OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_MISC_NEAR_CONTROL_TRANSFER,	//LOOPNZ Jb
	OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_MISC_NEAR_CONTROL_TRANSFER,	//LOOPZ Jb
	OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_MISC_NEAR_CONTROL_TRANSFER,	//LOOP Jb
	OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_MISC_NEAR_CONTROL_TRANSFER,	//JeCXZ Jb
	OPCODE_INTERPRET,	//IN AL, Ib
	OPCODE_INTERPRET,	//IN eAX, Ib
	OPCODE_INTERPRET,	//OUT Ib, AL
	OPCODE_INTERPRET,	//OUT Ib, eAX

	OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_UNCOND_NEAR_CONTROL_TRANSFER,	//CALL Jv
	OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_UNCOND_NEAR_CONTROL_TRANSFER,	//JMP Jv
	OPCODE_INTERPRET,	//JMP FAR Ap
	OPCODE_HAS_IMMEDIATE_BYTE | OPCODE_UNCOND_NEAR_CONTROL_TRANSFER,	//JMP Jb
	OPCODE_INTERPRET,	//IN AL, DX
	OPCODE_INTERPRET,	//IN eAX, DX
	OPCODE_INTERPRET,	//OUT DX, AL
	OPCODE_INTERPRET,	//OUT DX, eAX

	OPCODE_PREFIX,						//LOCK
	OPCODE_INTERPRET,					//INT 1
	OPCODE_PREFIX,						//REPNE
	OPCODE_PREFIX,						//REP(E)
	OPCODE_INTERPRET,					//HALT
	0,									//CMC
	OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_HAS_IMMEDIATE_BYTE_IF_REG_0,		//UNARY3 Eb
	OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_HAS_IMMEDIATE_O_SIZE_IF_REG_0,	//UNARY3 Ev

	0,													//CLC
	0,													//STC
	OPCODE_INTERPRET,									//CLI
	OPCODE_INTERPRET,									//STI
	0,													//CLD
	0,													//STD
	OPCODE_HAS_MOD_RM | OPCODE_GROUP,					//INCDEC4
	OPCODE_INTERPRET_IF_REG_2345 | OPCODE_HAS_MOD_RM | OPCODE_GROUP	//INCDEC5
};

const OpcodeProperties prefix0fOpcodeProperties[0x100] =
{
	OPCODE_INTERPRET | OPCODE_HAS_MOD_RM | OPCODE_GROUP,	//GRP6
	OPCODE_INTERPRET | OPCODE_HAS_MOD_RM | OPCODE_GROUP,	//GRP7
	OPCODE_INTERPRET | OPCODE_HAS_MOD_RM,					//LAR Gv, Ew
	OPCODE_INTERPRET | OPCODE_HAS_MOD_RM,					//LSL Gv, Ew
	OPCODE_INTERPRET,										//Reserved
	OPCODE_INTERPRET,										//Reserved
	OPCODE_INTERPRET,										//CLTS
	OPCODE_INTERPRET,										//Reserved

	OPCODE_INTERPRET,	//INVD
	OPCODE_INTERPRET,	//WBINVD
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//UD2
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved

	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE

	OPCODE_INTERPRET,	//PREFETCH
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved

	OPCODE_HAS_MOD_RM,						//MOV Rd, Cd
	OPCODE_HAS_MOD_RM,						//MOV Rd, Dd
	OPCODE_INTERPRET | OPCODE_HAS_MOD_RM,	//MOV Cd, Rd
	OPCODE_INTERPRET | OPCODE_HAS_MOD_RM,	//MOV Dd, Rd
	OPCODE_INTERPRET,						//Reserved
	OPCODE_INTERPRET,						//Reserved
	OPCODE_INTERPRET,						//Reserved
	OPCODE_INTERPRET,						//Reserved

	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE

	OPCODE_INTERPRET,	//WRMSR
	OPCODE_FUNCTION_IMPLEMENTATION,	//RDTSC
	OPCODE_INTERPRET,	//RDMSR
	OPCODE_INTERPRET,	//RDPMC
	OPCODE_INTERPRET,	//SYSENTER
	OPCODE_INTERPRET,	//SYSEXIT
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved

	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved

	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,	//CMOVO Gv, Ev
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,	//CMOVNO Gv, Ev
	OPCODE_HAS_MOD_RM,	//CMOVB Gv, Ev
	OPCODE_HAS_MOD_RM,	//CMOVNB Gv, Ev
	OPCODE_HAS_MOD_RM,	//CMOVZ Gv, Ev
	OPCODE_HAS_MOD_RM,	//CMOVNZ Gv, Ev
	OPCODE_HAS_MOD_RM,	//CMOVBE Gv, Ev
	OPCODE_HAS_MOD_RM,	//CMOVNBE Gv, Ev

	OPCODE_HAS_MOD_RM,	//CMOVS Gv, Ev
	OPCODE_HAS_MOD_RM,	//CMOVNS Gv, Ev
	OPCODE_HAS_MOD_RM,	//CMOVP Gv, Ev
	OPCODE_HAS_MOD_RM,	//CMOVNP Gv, Ev
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,	//CMOVL Gv, Ev
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,	//CMOVNL Gv, Ev
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,	//CMOVLE Gv, Ev
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,	//CMOVNLE Gv, Ev

	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE

	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE

	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE

	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE

	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//EMMS

	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE

	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JO Jv
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNO Jv
	OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JB Jv
	OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNB Jv
	OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JZ Jv
	OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNZ Jv
	OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JBE Jv
	OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNBE Jv

	OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JS Jv
	OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNS Jv
	OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JP Jv
	OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNP Jv
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JL Jv
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNL Jv
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JLE Jv
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_IMMEDIATE_O_SIZE | OPCODE_COND_NEAR_CONTROL_TRANSFER,	//JNLE Jv

	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,	//SETO Eb
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,	//SETNO Eb
	OPCODE_HAS_MOD_RM,	//SETB Eb
	OPCODE_HAS_MOD_RM,	//SETNB Eb
	OPCODE_HAS_MOD_RM,	//SETZ Eb
	OPCODE_HAS_MOD_RM,	//SETNZ Eb
	OPCODE_HAS_MOD_RM,	//SETBE Eb
	OPCODE_HAS_MOD_RM,	//SETNBE Eb

	OPCODE_HAS_MOD_RM,	//SETS Eb
	OPCODE_HAS_MOD_RM,	//SETNS Eb
	OPCODE_HAS_MOD_RM,	//SETP Eb
	OPCODE_HAS_MOD_RM,	//SETNP Eb
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,	//SETL Eb
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,	//SETNL Eb
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,	//SETLE Eb
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,	//SETNLE Eb

	0,												//PUSH FS
	0,												//POP FS
	OPCODE_FUNCTION_IMPLEMENTATION,					//CPUID
	OPCODE_HAS_MOD_RM,								//BT Ev, Gv
	OPCODE_HAS_MOD_RM | OPCODE_HAS_IMMEDIATE_BYTE,	//SHLD Ev, Gv, Ib
	OPCODE_HAS_MOD_RM,								//SHLD Ev, Gv, CL
	OPCODE_INTERPRET,								//Reserved
	OPCODE_INTERPRET,								//Reserved

	0,												//PUSH GS
	0,												//POP GS
	OPCODE_INTERPRET,								//RSM
	OPCODE_HAS_MOD_RM,								//BTS Ev, Gv
	OPCODE_HAS_MOD_RM | OPCODE_HAS_IMMEDIATE_BYTE,	//SHRD Ev, Gv, Ib
	OPCODE_HAS_MOD_RM,								//SHRD Ev, Gv, CL
	OPCODE_INTERPRET,								//GRP 15
	OPCODE_HAS_MOD_RM,								//IMUL Gv, Ev

	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,		//CMPXCHG Eb, Gb
	OPCODE_FUNCTION_IMPLEMENTATION | OPCODE_HAS_MOD_RM,		//CMPXCHG Ev, Gv
	OPCODE_INTERPRET | OPCODE_HAS_MOD_RM,					//LSS Gv, Mp
	OPCODE_HAS_MOD_RM,										//BTR Ev, Gv
	OPCODE_HAS_MOD_RM,										//LFS Gv, Mp
	OPCODE_HAS_MOD_RM,										//LGS Gv, Mp
	OPCODE_HAS_MOD_RM,										//MOVZX Gv, Eb
	OPCODE_HAS_MOD_RM,										//MOVZX Gv, Ew

	OPCODE_INTERPRET,	//Reserved
	OPCODE_INTERPRET,	//INVALID
	OPCODE_HAS_MOD_RM | OPCODE_GROUP | OPCODE_HAS_IMMEDIATE_BYTE,	//GRP8 Ev, Ib
	OPCODE_HAS_MOD_RM,	//BTC Ev, Gv
	OPCODE_HAS_MOD_RM,	//BSF Gv, Ev
	OPCODE_HAS_MOD_RM,	//BSR Gv, Ev
	OPCODE_HAS_MOD_RM,	//MOVSX Gv, Eb
	OPCODE_HAS_MOD_RM,	//MOVSX Gv, Ew

	OPCODE_HAS_MOD_RM,	//XADD Eb, Gb
	OPCODE_HAS_MOD_RM,	//XADD Ev, Gv
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//MOVNTI Md, Gd
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_HAS_MOD_RM  | OPCODE_GROUP,	//GRP9

	0,	//BSWAP EAX
	0,	//BSWAP ECX
	0,	//BSWAP EDX
	0,	//BSWAP EBX
	0,	//BSWAP ESP
	0,	//BSWAP EBP
	0,	//BSWAP ESI
	0,	//BSWAP EDI

	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE

	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE

	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE

	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE

	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE

	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//SSE
	OPCODE_INTERPRET,	//Reserved
};

//Which coprocessor register instructions (of the form 11011XXX11YYYYYY) are valid?
//Array indexed by XXXYYYYYY
const bool coprocRegisterInstructionValid[8 * 64] =
{
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,

	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	true,	true,	false,	false,	true,	true,	false,	false,
	true,	true,	true,	true,	true,	true,	true,	false,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,

	false,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	false,	true,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,

	false,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	true,	true,	true,	true,	true,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	false,	true,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,

	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	false,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,

	true,	true,	true,	true,	true,	true,	true,	true,
	false,	false,	false,	false,	false,	false,	false,	false,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	false,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,

	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	false,	false,	false,	false,	false,	false,	false,	false,
	false,	true,	false,	false,	false,	false,	false,	false,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,
	true,	true,	true,	true,	true,	true,	true,	true,

	false,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	true,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false,
	false,	false,	false,	false,	false,	false,	false,	false
};
